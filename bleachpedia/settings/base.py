"""

Django | Base project | 30 Marzo 2020

Generated by 'django-admin startproject' using Django 2.2.2

"""
import os
import json
import environ
from bleachpedia.core.settings import Settings


class BaseSettings(Settings):

    """ Community base settings, don't use this directly. """
    # Main Path
    SITE_ROOT = os.path.dirname(
        os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

    env = environ.Env(
        # DJANGO
        DEBUG=(bool, False),
        SECRET_KEY=str,
        INTERNAL_IPS=(list, ['127.0.0.1']),
        ALLOWED_HOSTS=(list, ['127.0.0.1']),
        ADMINS=str,
        # DB & Cache
        DATABASE_URL=str,
        # Log
        DISABLE_EXISTING_LOGGERS=(bool, False),
        # EMAIL
        EMAIL_URL=str,
        DEFAULT_FROM_EMAIL=str,
        # AWS
        ENABLE_REMOTE_STORAGE=(bool, False),
        # Project
        ADMIN_SITE_HEADER=str,
        ADMIN_SITE_TITLE=str,
        ADMIN_SITE_INDEX_TITLE=str,
        PROJECT=str
    )
    env_path = None
    if os.environ['DJANGO_SETTINGS_MODULE'] == 'bleachpedia.settings.dev':
        env_path = os.path.join(SITE_ROOT, '.config_project/environ/dev/.env')
    elif os.environ['DJANGO_SETTINGS_MODULE'] == 'bleachpedia.settings.production':
        env_path = os.path.join(SITE_ROOT, '.config_project/environ/production/.env')

    environ.Env.read_env(env_path)  # reading .env file

    SECRET_KEY = env('SECRET_KEY')

    ROOT_URLCONF = 'bleachpedia.core.urls'
    # LOGIN_REDIRECT_URL = '/dashboard/'  < posible uso ! >

    # Debug settings
    DEBUG = env('DEBUG')

    WSGI_APPLICATION = 'bleachpedia.core.wsgi.application'

    DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')
    EMAIL_URL = env.email()  # == EMAIL_URL = env.email_url('EMAIL_URL')

    @property
    def ADMINS(self):  # noqa
        admins_emails = self.env('ADMINS')
        return list(email for email in json.loads(admins_emails))

    MANAGERS = ADMINS

    # Application Classes
    @property
    def INSTALLED_APPS(self):  # noqa
        apps = [
            # django apps
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'django.contrib.humanize',
            'django.contrib.sites',

            # django-allauth
            # 'allauth',
            # 'allauth.account',
            # 'allauth.socialaccount',

            # Third party apps
            'rest_framework',
            'corsheaders',
            'django_filters',
            'widget_tweaks',

            # Project apps
            'bleachpedia.apps.api',
            'bleachpedia.apps.crud',
        ]
        return apps

    # Admin Vars
    ADMIN_SITE_HEADER = env('ADMIN_SITE_HEADER')
    ADMIN_SITE_TITLE = env('ADMIN_SITE_TITLE')
    ADMIN_SITE_INDEX_TITLE = env('ADMIN_SITE_INDEX_TITLE')
    PROJECT = env('PROJECT')
    SITE_URL = '/panel/'

    @property
    def DATABASES(self):  # noqa
        db_engine = self.env('DB_ENGINE')
        if db_engine == 'mysql':
            return {
                'default': self.env.db()
            }
        return {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': os.path.join(self.SITE_ROOT, 'dev.db'),
            }
        }

    FIXTURE_DIRS = [os.path.join(SITE_ROOT, '.config_project/fixtures')]  # No debe cambiar el path de este dir

    # Media
    if env('ENABLE_REMOTE_STORAGE'):
        AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
        AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')

        AWS_S3_CUSTOM_DOMAIN = F'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
        MEDIAFILES_LOCATION = 'media'
        MEDIA_URL = F"https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/"
        DEFAULT_FILE_STORAGE = 'bleachpedia.core.storages.CustomMediaStorage'
        # AWS_MEDIA_LOCATION = 'media'

        AWS_S3_OBJECT_PARAMETERS = {
            'CacheControl': 'max-age=86400',
        }
    else:
        MEDIA_URL = '/media/'
        MEDIA_ROOT = os.path.join(SITE_ROOT, '.media')

    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(SITE_ROOT, '.static')
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.CachedStaticFilesStorage'

    STATICFILES_DIRS = [
        os.path.join(SITE_ROOT, 'bleachpedia/static'),
    ]

    STATICFILES_FINDERS = [
        'django.contrib.staticfiles.finders.FileSystemFinder',
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    ]

    TEMPLATE_ROOT = os.path.join(SITE_ROOT, 'bleachpedia/templates')
    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [TEMPLATE_ROOT],
            'OPTIONS': {
                'debug': DEBUG,
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
                'loaders': [
                    'django.template.loaders.filesystem.Loader',
                    'django.template.loaders.app_directories.Loader',
                ],
            },
        },
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',  # Es un default!
        'django.middleware.common.CommonMiddleware',
        'django.middleware.common.BrokenLinkEmailsMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
        'corsheaders.middleware.CorsMiddleware',
    ]

    SITE_ID = 1

    # Django Allauth
    AUTHENTICATION_BACKENDS = [
        'django.contrib.auth.backends.ModelBackend',
        'allauth.account.auth_backends.AuthenticationBackend',
    ]

    # Django Auth
    # LOGIN_URL = 'account_login'
    # LOGIN_REDIRECT_URL = '/admin-blog/'
    # ACCOUNT_LOGOUT_REDIRECT_URL = 'account_login'

    # REST_FRAMEWORK = {
    #     'DEFAULT_AUTHENTICATION_CLASSES': (
    #         'rest_framework.authentication.TokenAuthentication',
    #         'rest_framework.authentication.BasicAuthentication',
    #         'rest_framework.authentication.SessionAuthentication',
    #     ),
    #     'DEFAULT_PERMISSION_CLASSES': [
    #         'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    #     ]
    # }

    # I18n
    TIME_ZONE = 'America/Cancun'
    USE_TZ = True
    LANGUAGE_CODE = 'es-MX'
    USE_I18N = True
    USE_L10N = True

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            'OPTIONS': {
                'min_length': 9,
            }
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]

    # Security & X-Frame-Options Middleware
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'

    # CORS
    CORS_ALLOW_HEADERS = (
        'x-requested-with',
        'content-type',
        'accept',
        'origin',
        'authorization',
        'x-csrftoken'
    )

    ALLOWED_HOSTS = env('ALLOWED_HOSTS')
    INTERNAL_IPS = env('INTERNAL_IPS')

    # Logging
    # @property
    # def SENTRY(self):
    #     if not self.DEBUG:
    #         import sentry_sdk
    #         from sentry_sdk.integrations.django import DjangoIntegration
    #         return sentry_sdk.init(
    #             dsn=self.env('SENTRY_DSN'),
    #             integrations=[DjangoIntegration()]
    #         )

    LOGS_ROOT = os.path.join(SITE_ROOT, '.logs')
    LOG_FORMAT = '|| %(levelname)s || %(name)s || %(lineno)s[%(process)d] || %(message)s'
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'default': {
                'format': LOG_FORMAT,
                'datefmt': '%d/%b/%Y %H:%M:%S',
            },
        },
        'filters': {
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            },
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse',
            },
        },
        'handlers': {
            'console': {
                'level': env('LOG_CONSOLE_LEVEL'),
                'class': 'logging.StreamHandler',
                'formatter': 'default'
            },
            'debug': {
                'level': env('LOG_FILE_DJANGO_LEVEL'),
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': os.path.join(LOGS_ROOT, 'django/debug.log'),
                'formatter': 'default',
            },
            'mail_admins': {
                'level': 'ERROR',
                'filters': ['require_debug_false'],
                'formatter': 'default',
                'class': 'django.utils.log.AdminEmailHandler',
                'include_html': True,
            },
            'null': {
                'class': 'logging.NullHandler',
            },
        },
        'loggers': {
            '': {
                'handlers': ['debug', 'console', 'mail_admins'],
                'level': 'DEBUG',
            },
            'django': {
                'handlers': ['debug', 'console', 'mail_admins'],
                'level': 'DEBUG',
                'propagate': False,
            },
            'bleachpedia': {
                'handlers': ['debug', 'console', 'mail_admins'],
                'level': 'DEBUG',
                'propagate': False,
            },
            'django.security.DisallowedHost': {
                'handlers': ['null'],
                'propagate': False,
            },
        },
    }
